{"version":3,"sources":["curve.js","LPF.js","images/stones.jpg","Indicator.js","Bildet.js","Graph.js","Animator.js","useWindowSize.js","Frame.js","App.js","registerServiceWorker.js","index.js"],"names":["CanvasRenderingContext2D","prototype","curve","points","tension","numOfSeg","close","pts","i","l","length","rPos","res","Float32Array","cache","cachePtr","slice","unshift","push","st","st2","st3","st23","st32","parse","t","pt1","pt2","pt3","pt4","t1x","t1y","t2x","t2y","c","c1","c2","c3","c4","this","lineTo","LPF","smoothing","buffer","bufferMaxSize","init","values","__push","value","removed","shift","next","nextValue","self","result","reduce","last","current","smoothArray","Math","round","module","exports","Indicator","props","useState","endpointStrokeWidth","circleStyle","stroke","opacity","fill","strokeWidth","svgteststyle","transform","top","preserveAspectRatio","useEffect","console","log","x1","y1","id","style","position","width","height","x2","y2","axis","handle","x","y","scale","onDrag","e","ui","xyChange","className","viewBox","cx","cy","r","Bildet","ctx","document","getElementById","getContext","clearRect","fillStyle","fillRect","imageObj","Image","src","image","onload","drawImage","strokeStyle","lineWidth","moveTo","initCanvas","ref","passRef","frameWidth","bildetHeight","Graph","drawingCanvasWidth","drawingCanvasHeight","Animator","onClick","startTransition","useWindowSize","Frame","setFrameWidth","setBildetHeight","imageCanvasRef","useRef","drawingCanvasRef","setX1","setY1","setX2","setY2","x1p","setX1p","y1p","setY1p","x2p","setX2p","y2p","setY2p","setDrawingCanvasWidth","setDrawingCanvasHeight","smooth","numberOfPoints","calibratePoint","setCalibratePoint","handleResize","getBoundingClientRect","plotLine","imageCtx","drawCtx","lineCap","beginPath","lx1","ly1","lx2","ly2","firstColorPoint","getImageData","data","lastColorPoint","ema","splice","filter","initx","inity","window","addEventListener","handleID","xgot","ygot","myVar","setInterval","direction","clearInterval","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.60944dc7.chunk.js","sourcesContent":["/*!\tCurve extension for canvas 2.3.1\r\n *\tEpistemex (c) 2013-2014\r\n *\tLicense: MIT\r\n */\r\n\r\n/**\r\n * Draws a cardinal spline through given point array. Points must be arranged\r\n * as: [x1, y1, x2, y2, ..., xn, yn]. It adds the points to the current path.\r\n *\r\n * The method continues previous path of the context. If you don't want that\r\n * then you need to use moveTo() with the first point from the input array.\r\n *\r\n * The points for the cardinal spline are returned as a new array.\r\n *\r\n * @param {Array} points - point array\r\n * @param {Number} [tension=0.5] - tension. Typically between [0.0, 1.0] but can be exceeded\r\n * @param {Number} [numOfSeg=20] - number of segments between two points (line resolution)\r\n * @param {Boolean} [close=false] - Close the ends making the line continuous\r\n * @returns {Float32Array} New array with the calculated points that was added to the path\r\n */\r\nCanvasRenderingContext2D.prototype.curve = CanvasRenderingContext2D.prototype.curve || function(points, tension, numOfSeg, close) {\r\n\r\n\t'use strict';\r\n\r\n\t// options or defaults\r\n\ttension = (typeof tension === 'number') ? tension : 0.5;\r\n\tnumOfSeg = numOfSeg ? numOfSeg : 25;\r\n\r\n\tvar pts,\t\t\t\t\t\t\t\t\t// for cloning point array\r\n\t\ti = 1,\r\n\t\tl = points.length,\r\n\t\trPos = 0,\r\n\t\trLen = (l-2) * numOfSeg + 2 + (close ? 2 * numOfSeg: 0),\r\n\t\tres = new Float32Array(rLen),\r\n\t\tcache = new Float32Array((numOfSeg + 2) * 4),\r\n\t\tcachePtr = 4;\r\n\r\n\tpts = points.slice(0);\r\n\r\n\tif (close) {\r\n\t\tpts.unshift(points[l - 1]);\t\t\t\t// insert end point as first point\r\n\t\tpts.unshift(points[l - 2]);\r\n\t\tpts.push(points[0], points[1]); \t\t// first point as last point\r\n\t}\r\n\telse {\r\n\t\tpts.unshift(points[1]);\t\t\t\t\t// copy 1. point and insert at beginning\r\n\t\tpts.unshift(points[0]);\r\n\t\tpts.push(points[l - 2], points[l - 1]);\t// duplicate end-points\r\n\t}\r\n\r\n\t// cache inner-loop calculations as they are based on t alone\r\n\tcache[0] = 1;\t\t\t\t\t\t\t\t// 1,0,0,0\r\n\r\n\tfor (; i < numOfSeg; i++) {\r\n\r\n\t\tvar st = i / numOfSeg,\r\n\t\t\tst2 = st * st,\r\n\t\t\tst3 = st2 * st,\r\n\t\t\tst23 = st3 * 2,\r\n\t\t\tst32 = st2 * 3;\r\n\r\n\t\tcache[cachePtr++] =\tst23 - st32 + 1;\t// c1\r\n\t\tcache[cachePtr++] =\tst32 - st23;\t\t// c2\r\n\t\tcache[cachePtr++] =\tst3 - 2 * st2 + st;\t// c3\r\n\t\tcache[cachePtr++] =\tst3 - st2;\t\t\t// c4\r\n\t}\r\n\r\n\tcache[++cachePtr] = 1;\t\t\t\t\t\t// 0,1,0,0\r\n\r\n\t// calc. points\r\n\tparse(pts, cache, l);\r\n\r\n\tif (close) {\r\n\t\t//l = points.length;\r\n\t\tpts = [];\r\n\t\tpts.push(points[l - 4], points[l - 3], points[l - 2], points[l - 1]); // second last and last\r\n\t\tpts.push(points[0], points[1], points[2], points[3]); // first and second\r\n\t\tparse(pts, cache, 4);\r\n\t}\r\n\r\n\tfunction parse(pts, cache, l) {\r\n\r\n\t\tfor (var i = 2, t; i < l; i += 2) {\r\n\r\n\t\t\tvar pt1 = pts[i],\r\n\t\t\t\tpt2 = pts[i+1],\r\n\t\t\t\tpt3 = pts[i+2],\r\n\t\t\t\tpt4 = pts[i+3],\r\n\r\n\t\t\t\tt1x = (pt3 - pts[i-2]) * tension,\r\n\t\t\t\tt1y = (pt4 - pts[i-1]) * tension,\r\n\t\t\t\tt2x = (pts[i+4] - pt1) * tension,\r\n\t\t\t\tt2y = (pts[i+5] - pt2) * tension;\r\n\r\n\t\t\tfor (t = 0; t < numOfSeg; t++) {\r\n\r\n\t\t\t\tvar c = t << 2, //t * 4;\r\n\r\n\t\t\t\t\tc1 = cache[c],\r\n\t\t\t\t\tc2 = cache[c+1],\r\n\t\t\t\t\tc3 = cache[c+2],\r\n\t\t\t\t\tc4 = cache[c+3];\r\n\r\n\t\t\t\tres[rPos++] = c1 * pt1 + c2 * pt3 + c3 * t1x + c4 * t2x;\r\n\t\t\t\tres[rPos++] = c1 * pt2 + c2 * pt4 + c3 * t1y + c4 * t2y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// add last point\r\n\tl = close ? 0 : points.length - 2;\r\n\tres[rPos++] = points[l];\r\n\tres[rPos] = points[l+1];\r\n\r\n\t// add lines to path\r\n\tfor(i = 0, l = res.length; i < l; i += 2)\r\n\t\tthis.lineTo(res[i], res[i+1]);\r\n\r\n\treturn res;\r\n};","/**\r\n * LPF\r\n * Low Pass Filter for JavaScript\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\r\nvar LPF = function(smoothing) {\r\n    this.smoothing = smoothing || 0.5; // must be smaller than 1\r\n    this.buffer = []; // FIFO queue\r\n    this.bufferMaxSize = 10;\r\n};\r\n\r\nLPF.prototype = {\r\n\r\n    /**\r\n     * Init buffer with array of values\r\n     * \r\n     * @param {array} values\r\n     * @returns {array}\r\n     * @access public\r\n     */\r\n    init: function(values) {\r\n        for (var i = 0; i < values.length; i++) {\r\n            this.__push(values[i]);\r\n        }\r\n        return this.buffer;\r\n    },\r\n\r\n    /**\r\n     * Add new value to buffer (FIFO queue)\r\n     *\r\n     * @param {integer|float} value\r\n     * @returns {integer|float}\r\n     * @access private\r\n     */\r\n    __push: function(value) {\r\n        var removed = (this.buffer.length === this.bufferMaxSize)\r\n            ? this.buffer.shift()\r\n            : 0;\r\n\r\n        this.buffer.push(value);\r\n        return removed;\r\n    },\r\n\r\n    /**\r\n     * Smooth value from stream\r\n     *\r\n     * @param {integer|float} nextValue\r\n     * @returns {integer|float}\r\n     * @access public\r\n     */\r\n    next: function (nextValue) {\r\n        var self = this;\r\n        // push new value to the end, and remove oldest one\r\n        var removed = this.__push(nextValue);\r\n        // smooth value using all values from buffer\r\n        var result = this.buffer.reduce(function(last, current) {\r\n            return self.smoothing * current + (1 - self.smoothing) * last;\r\n        }, removed);\r\n        // replace smoothed value\r\n        this.buffer[this.buffer.length - 1] = result;\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Smooth array of values\r\n     *\r\n     * @param {array} values\r\n     * @returns {undefined}\r\n     * @access public\r\n     */\r\n    smoothArray: function (values){\r\n        var value = values[0];\r\n        for (var i = 1; i < values.length; i++){\r\n            var currentValue = values[i];\r\n            value += (currentValue - value) * this.smoothing;\r\n            values[i] = Math.round(value);\r\n        }\r\n        return values;\r\n    }\r\n};\r\n\r\nmodule.exports = new LPF();","export default __webpack_public_path__ + \"static/media/stones.f3314072.jpg\";","// indicator component:\r\n//\t a line draggable by its endpoints,\r\n//   indicating what pixels from underlying image to process.\r\n//   for use in frame component\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Draggable from 'react-draggable';  // import react-draggable, which is installed via npm, for dragging elements\r\nimport './Indicator.css';\r\n \r\nfunction Indicator (props) {\r\n\r\n  const [endpointStrokeWidth, setEndpointStrokeWidth] = useState('0.42em');\r\n\r\n  // dynamic styles\r\n  const indicatorDivStyle = {\r\n    position: 'relative',\r\n    //backgroundColor: 'red',\r\n\r\n    width: '100%',\r\n    height: '100%',\r\n    //top: '50%',\r\n    //left: '50%',\r\n    //transform: 'translate(-50%, -50%)',\r\n  };\r\n\r\n  const lineStyle = {\r\n    position: 'absolute',\r\n    stroke: '#6b6b6b',\r\n    strokeWidth: '0.2em',\r\n    opacity: '0.7',\r\n  };\r\n\r\n  const circleDivStyle = {\r\n    display: 'inline-block',\r\n    height: '30px',\r\n    width: '30px',\r\n    zIndex: 2\r\n  };\r\n\r\n  const circleStyleDark = {\r\n    stroke: '#554444',\r\n    opacity: '0.3',\r\n    fill: 'none',\r\n    strokeWidth: endpointStrokeWidth\r\n  };\r\n\r\n  const circleStyle = {\r\n    stroke: '#554444',\r\n    opacity: '0.3',\r\n    fill: 'none',\r\n    strokeWidth: endpointStrokeWidth\r\n  };\r\n\r\n  const svgteststyle = {\r\n    transform: 'translate(-2.5em, -2.5em)',\r\n    top: '30px',\r\n    //backgroundColor: 'red',\r\n    preserveAspectRatio: \"none\",\r\n  }\r\n\r\n  const svgLineStyle = {\r\n    position: 'absolute'\r\n  }\r\n\r\n  // on every change in state\r\n  useEffect(() => {\r\n      console.log('useeffect indicator with x, y ' + props.x1 + ', ' + props.y1);\r\n\r\n  });\r\n\r\n  function handleMove5 (e, ui) {\r\n    props.xyChange(0, ui.x, ui.y);\r\n    // console.log('handle1 ui x ' + ui.x + ' ui y ' + ui.y);\r\n  }\r\n\r\n  function handleMove6 (e, ui) {\r\n    props.xyChange(1, ui.x, ui.y);\r\n    // console.log('handle2 ui x ' + ui.x + ' ui y ' + ui.y);\r\n  }\r\n\r\n  return (\r\n    \r\n    // indicator container div\r\n    // line is 0 + because otherwise it assumes some default strange pos\r\n    // +0 because style transform needs an int in  order to work\r\n    <div id=\"indicator\" style={indicatorDivStyle}>\r\n      \r\n      {/*line*/}\r\n      <svg style={svgLineStyle} width=\"100%\" height=\"100%\" >\r\n        <line id='line'\r\n              style={lineStyle}\r\n              x1={props.x1 + 0}\r\n              y1={props.y1 + 0}\r\n              x2={props.x2 + 0}\r\n              y2={props.y2 + 0} />\r\n      </svg>\r\n\r\n      {/*handle l*/}\r\n      <Draggable\r\n        id='draggable1'\r\n        axis=\"both\"\r\n        handle=\".handle\"\r\n        position={{x: props.x1, y: props.y1}}\r\n        scale={1}\r\n        onDrag={handleMove5}\r\n        // onStop={handleStop5p}\r\n        >  \r\n        \r\n        <div id='handle1'>\r\n    \r\n          <svg style={svgteststyle}    \r\n            className=\"handle\"\r\n            width='5em'\r\n            height=\"5em\"\r\n            viewBox=\"56 56 112 112\">\r\n\r\n            <circle style={circleStyle} cx={'112'} cy={'112'} r={'25'}/>\r\n          </svg>\r\n        </div>\r\n      </Draggable>\r\n\r\n      {/*handle r*/}\r\n      <Draggable\r\n        id='draggable2'\r\n        axis=\"both\"\r\n        handle=\".handle\"\r\n        position={{x: props.x2, y: props.y2}}\r\n        scale={1}\r\n        onDrag={handleMove6}\r\n        >  \r\n        \r\n        <div id='handle2'>\r\n      \r\n          <svg style={svgteststyle}    \r\n            className=\"handle\"\r\n            width='5em'\r\n            height=\"5em\"\r\n            viewBox=\"0 0 112 112\">\r\n\r\n            <circle style={circleStyle} cx={'56'} cy={'56'} r={'25'}/>\r\n          </svg>\r\n        </div>\r\n      </Draggable>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Indicator;","\r\n/*\r\nimage from which to extract data,\r\nbased on position of indicator line overlay\r\nalternatively not background but html element: <img src={image} alt=\"\" style={imageStyle}/>\r\n\r\nthere are two spots for css: Image.css and const divStyle\r\n  this is because some elements are supposed to be dynamic, like opacity and image choice\r\n\r\n*/\r\n\r\n// todo: get size of parent on which to stretch canvas\r\n\r\nimport React, { useEffect } from 'react';\r\n// import image from './images/texture.jpg'; // here we are importing the image\r\nimport image from \"./images/stones.jpg\"\r\nimport Indicator from './Indicator';\r\nimport './Bildet.css';\r\n\r\nfunction Bildet (props) {\r\n\r\n  // for things that should not happen before render\r\n  //   in this case, get element by id cannot happen before render, as it does not exist then\r\n  //\r\n  // added second parameter [] to useEffect if to run just once (not everytime state gets updated)\r\n  // the second param [] is an array of variables that the component will check to make sure changed before re-rendering\r\n  useEffect(() => {\r\n\r\n    // this cannot happen before render as the canvas does not exist before render (or can it now?)\r\n    initCanvas();\r\n  }, []);\r\n\r\n  function initCanvas () {\r\n    var canvasPic = document.getElementById(\"canvasPic\");\r\n    var ctx = canvasPic.getContext(\"2d\");\r\n\r\n    ctx.clearRect(0, 0, 120, 400);\r\n    ctx.fillStyle = \"#0000F2\";         // make background fill (is this necessary?)\r\n    ctx.fillRect(0, 0, 1120, 364);\r\n\r\n    var imageObj = new Image();\r\n    imageObj.src = image;\r\n    imageObj.onload = function() {\r\n      //void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\r\n\r\n      ctx.drawImage(imageObj, 0, 0, 2500, 600, 0, 0, 2500, 600);\r\n    };\r\n\r\n    // test drawing\r\n    ctx.strokeStyle = \"#AA9999\";\r\n    ctx.lineWidth = 3;\r\n    ctx.moveTo(50, 300);\r\n    ctx.lineTo(90, 210);\r\n    ctx.stroke();\r\n  }\r\n\r\n  return (\r\n    <div id='bildet'>\r\n      <canvas ref={props.passRef} id=\"canvasPic\" width={'1120'} height=\"364\"></canvas>\r\n      <p id='bildetTitle' >draggable circles adjust line measuring image brightness</p>\r\n      <Indicator \r\n        frameWidth={props.frameWidth}\r\n        bildetHeight={props.bildetHeight}\r\n        x1={props.x1}\r\n        y1={props.y1}\r\n        x2={props.x2}\r\n        y2={props.y2}\r\n        xyChange={props.xyChange}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bildet;","//image from which to extract data, based on position of indicator line overlay\r\n\r\nimport React, { useEffect } from 'react';\r\nimport './Graph.css';\r\n\r\nfunction Graph (props) {\r\n  return (\r\n    <div className='graph'> {/*comment here*/}\r\n      <canvas ref={props.passRef} id=\"drawingCanvas\" width={props.drawingCanvasWidth} height={props.drawingCanvasHeight}></canvas>\r\n      <svg id='playIndexLine' width=\"10%\" height=\"100%\" >\r\n        <line id='line' x1='22' y1='0' x2='22' y2='200' />\r\n      </svg>\r\n      <p id='graphTitle'>graph represents image brightness along line between circles</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;","\r\n/*\r\nimage from which to extract data,\r\nbased on position of indicator line overlay\r\nalternatively not background but html element: <img src={image} alt=\"\" style={imageStyle}/>\r\n\r\nthere are two spots for css: Image.css and const divStyle\r\n  this is because some elements are supposed to be dynamic, like opacity and image choice\r\n*/\r\n\r\n// todo: get size of parent on which to stretch canvas\r\nimport './Animator.css';\r\n\r\nfunction Animator (props) {\r\n\r\n  return (\r\n    <div id='ani' className='animator'>\r\n      <p id='animatorTitle' >play CSS transition following brightness graph left to right</p>\r\n      <svg onClick={props.startTransition} id='playTriangle' viewBox=\"0 0 100 100\">\r\n        <polygon points=\"35,35 35,65 65,50\"/>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Animator;","// this is from https://usehooks.com/useWindowSize/\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n// Hook\r\nfunction useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    \r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n    \r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n\r\n  function handleResize() {\r\n    // Set window width/height to state\r\n    setWindowSize({\r\n      width: window.innerWidth, //document.getElementById('frame').getBoundingClientRect().width,\r\n      height: window.innerHeight,\r\n    });\r\n  }\r\n\r\n  return windowSize;\r\n}\r\n\r\nexport default useWindowSize","/*\nthis, Frame.js, is the container\n  for the image object and indicator objects and graph object and settings\nits purpose is\n  to be a centered, dynamically resizing container in which to place its children\nit is vertically centered and full screen width up to 70 em\n\nNOW:\n  title should center vertically in available space, also on resize\n\ntodo today\n  play button should not go out of right bounds\n  subtitles should fit narrow width/height\n  play line should be same style as scan line\n  play line should be accurately placed\n  graph should have a solid relation to its borders\n\nTODO BUGS:\n  check performance on low end devices\n  when dragging outside canvas, crash: set dragging bounds\n  sometimes a line of background is visible, depending on width of window\n  when resizing small horizontally, top disappears\n  title is jumping with bars\n  when dragging circle, it cuts edge (make margin bigger?)\n\nTODO ADJUST:\n  dynamic contrast of circles\n  limit to 100 points for animation export\n  currently only red is used?\n  white screen before load rather than flashing random stuff\n\nTODO CLEANUP:\n  use return rather than method props ... in order to encapsulate\n  clean up code so far\n  clean up warnings in console\n  combine useeffect in one, not two?\n  consider baking usestates inside one object\n  make sure that all references to size is pointing to a var\n  check all prop sends are good style\n\nTODO FEATURES:\n  circles are hand drawn on transparent\n  get it on git\n  make lowpass filter damping dynamic by fader\n  l and r markers of handles are missing\n  settings menu is missing, with smooth\n  handle should transform on hover\n  framing of graph is missing\n\nTODO DOCUMENT:\n  credit: drag and drop library\n  credit: LPF library: https://www.npmjs.com/package/lpf\n  credit: curve library\n  credit new draggable from https://levelup.gitconnected.com/create-an-easy-custom-react-hook-for-dragging-components-3779b30d08b5\n  credit translate values from https://sagarpansuriya.wordpress.com/2020/08/08/how-to-get-css-translate-values-with-javascript/\n  moving average: https://github.com/kaelzhang/moving-averages#readme\n  useWindowSize: https://usehooks.com/useWindowSize/\n\nDONE: \n  filter starts at strange position - must pad start values?\n  position handles and line mid-canvas at start\n  svg container for line is not in place\n  bug: line is not always centering within circle: x and y on mark\n  main issue: image canvas is too big, skewing scan coordinates\n  filter is strange behavior - suspect filter or curve does not like minus values - convert all to +?\n  handles are off screen: check position:relative, etc.\n  line is not centering in handles: follow and ... reqth\n  graph is not scaling correctly: drawingcanvaswidth should be replaced with winwos wideth\n  how to get portion of image that i want\n  filter has strange shark fin curve on hard onsets - get better filter? yes, get or make second order filter\n  when handle/line position is not scaling: x1 should be dynamic width of canvas + something \n  graph is too high: on resize get height of graph, etc.\n*/\n\nimport React, {useState, useEffect, useRef} from 'react';\nimport './Frame.css';\nimport Bildet from './Bildet'; // import image object to display\nimport Graph from './Graph';\nimport Animator from './Animator';\nimport useWindowSize from './useWindowSize';\nimport './curve.js';\nimport LPF from './LPF.js';\nimport {ma, dma, ema, sma, wma} from 'moving-averages'\nimport image from \"./images/stones.jpg\"\n\nfunction Frame() {\n\n  const [frameWidth, setFrameWidth] = useState(100);\n  const [bildetHeight, setBildetHeight] = useState(100);\n\n  // references for canvas before it is initialized\n  const imageCanvasRef = useRef(null);\n  const drawingCanvasRef = useRef(null);\n\n  // state variables\n  const [x1, setX1] = useState(100);    // indicator endpoint 1 x coordinate\n  const [y1, setY1] = useState(100);    //   and y coordinate\n  const [x2, setX2] = useState(300);    // indicator endpoint 2 x coordinate\n  const [y2, setY2] = useState(200);    //   and y coordinate\n\n  const [x1p, setX1p] = useState(0.2);    // indicator endpoint 1 x coordinate\n  const [y1p, setY1p] = useState(0.2);    //   and y coordinate\n  const [x2p, setX2p] = useState(0.3);    // indicator endpoint 2 x coordinate\n  const [y2p, setY2p] = useState(0.3);    //   and y coordinate\n\n  const defaultX1 = 100;\n  const defaultY1 = 270;\n  const defaultX2 = 100;\n  const defaultY2 = 200;\n\n  const [drawingCanvasWidth, setDrawingCanvasWidth] = useState(null);\n  const [drawingCanvasHeight, setDrawingCanvasHeight] = useState(null);\n  const [graphHeight, setGraphHeight] = useState(null);\n\n  const [smooth, setSmooth] = useState(3);    // indicator endpoint 1 x coordinate\n\n  // dynamic number of points based on length of line, or static 100 points?\n  const numberOfPoints = 100;\n  const [calibratePoint, setCalibratePoint] = useState(0);\n\n  // initialize array for points of color along line\n  var points = [];\n\n  // on first render\n  useEffect(() => {\n\n    console.log('bare første gang');\n\n    // get width, height from frame, set canvas dimensions\n    setDrawingCanvasWidth(document.getElementById('drawingCanvas').getBoundingClientRect().width);\n    setDrawingCanvasHeight(document.getElementById('drawingCanvas').getBoundingClientRect().height);\n    initCanvas(drawingCanvasWidth, drawingCanvasHeight);\n\n    // add event listener for resizing\n    window.addEventListener(\"resize\", handleResize);\n\n    // call handler right away so state gets updated with initial window size\n    handleResize();\n  }, []);\n\n  // on every change in state\n  useEffect(() => {\n    console.log('hver gang noe endres i frame'); // som når resize trigger [set]\n\n    plotLine();\n\n    // this is what scales handles and line !!\n    setX1(x1p * frameWidth);\n    setY1(bildetHeight * y1p);\n    console.log('x1p ' + x1p);\n\n    setX2(frameWidth * x2p);\n    setY2(bildetHeight * y2p);\n\n    /*\n    setX1(frameWidth/5);\n    setX2(frameWidth/2);\n    setY1(bildetHeight/10);\n    setY2(bildetHeight/5);\n    */\n  });\n\n  // initialize canvases\n  function initCanvas (initx, inity) {\n\n    const imageCtx = imageCanvasRef.current.getContext(\"2d\");\n    const drawCtx = drawingCanvasRef.current.getContext(\"2d\");\n\n    imageCtx.fillStyle = \"#FAFAFA\";\n\n    // make background fill - is this necessary?\n    drawCtx.fillStyle = \"#FAF2F2\";\n    drawCtx.fillRect(0, 0, initx, inity);\n\n    drawCtx.strokeStyle = \"#AA9999\";\n    drawCtx.lineWidth = 2;\n  }\n\n  // record handle positions for use by line drawing and line scanning\n  function setXY(handleID, xgot, ygot) {\n    if (handleID == 0) {\n      console.log('nå flytter vi');\n\n      setX1p(xgot / frameWidth);\n      console.log('xgot ' + xgot + ' frameWidth ' + frameWidth + ' x1p ' + x1p);\n      setX1(frameWidth * x1p);\n      setY1p(ygot / bildetHeight);\n      setY1(frameWidth * y1p);\n    }\n    if (handleID == 1) {\n      setX2p(xgot / frameWidth);\n      setX2(frameWidth * x2p);\n      setY2p(ygot / bildetHeight);\n      setY2(frameWidth * y2p);\n    }\n  }\n\n  function handleResize() {\n    // Set window width/height to state\n    setFrameWidth(document.getElementById('frame').getBoundingClientRect().width);\n    setBildetHeight(document.getElementById('bildet').getBoundingClientRect().height);\n\n    console.log('resized');\n  }\n\n  // function for drawing graph from line, walk through coordinates of line, for each point extract colo value and plot on graph\n  function plotLine () {\n\n    // is there a more ... way of doing this check for exist, etc.?\n    const imageCtx = imageCanvasRef.current.getContext(\"2d\");\n    const drawCtx = drawingCanvasRef.current.getContext(\"2d\");\n\n    drawCtx.clearRect(0, 0, drawingCanvasWidth, drawingCanvasHeight);\n    drawCtx.strokeStyle = \"#AA9999\";\n    drawCtx.lineWidth = 1.0;\n    drawCtx.lineCap = 'round';\n    drawCtx.beginPath();\n\n    // special coordinates for extracting data\n    // here we are scaling x and y to account for mismatch due to static width image source vs potentially resized canvas\n    const lx1 = x1 * (1120 / frameWidth);\n    const ly1 = y1 * (1120 / frameWidth);\n    const lx2 = x2 * (1120 / frameWidth);\n    const ly2 = y2 * (1120 / frameWidth);\n\n    var firstColorPoint = 255 - imageCtx.getImageData(lx1, ly1, 1, 1).data[0];\n    var lastColorPoint = 255 - imageCtx.getImageData(lx2, ly2, 1, 1).data[0];\n\n    console.log('first color point ' + firstColorPoint);\n\n    // populate points array with color values along line\n    for (var i=0; i<numberOfPoints; i++) {\n\n      // get color data from pixel at current point along line\n      var data = imageCtx.getImageData(lx1 + ((lx2 - lx1) / numberOfPoints * i), ly1 + ((ly2 - ly1) / numberOfPoints * i), 1, 1).data;\n\n      // append new value to the array\n      points.push(255 - data[1]);\n    }\n\n    // filter points\n    points = filter(points, firstColorPoint, lastColorPoint);\n\n    for (var i=1; i<numberOfPoints; i++) {\n      drawCtx.lineTo(drawingCanvasWidth/numberOfPoints*i, points[i] / 255 * drawingCanvasHeight);\n    }\n    \n    drawCtx.stroke();\n\n    setCalibratePoint(points[0]);\n    document.getElementById(\"playTriangle\").style.transform = \"translate(\" + (480 - (points[0] + calibratePoint)) + \"px)\";\n  }\n\n  // filtering points to be graphed, using LPF library\n  function filter (points, firstColorPoint, lastColorPoint) {\n\n    // duplicate backwards 30 times for lowpass to be able to smooth backwards\n    for (var i=0; i < 30; i++) {\n      points.unshift(firstColorPoint);\n    }\n\n    // duplicate forwards 30 times for lowpass to be able to smooth forwards\n    for (var i=0; i < 30; i++) {\n      points.push(lastColorPoint);\n    }\n\n    //points = sma(points, 2, 1.7);\n    //points = sma(points, 10, 2.1);\n    //points = sma(points, 10, 2.1);\n    //points = sma(points, 10, 2.1);\n    //points = sma(points, 10, 2.1);\n    //points = sma(points, 10, 2.1);\n    \n    points = ema(points, smooth);\n    points = ema(points, smooth);\n    points = ema(points, smooth);\n    points = ema(points, smooth);\n    points = ema(points, smooth);\n\n    //console.log('smo ' + smooth);\n\n    // remove 30 pre points again\n    points.splice(0, 30);\n\n    return points\n  }\n\n  function redraw() {\n\n    /*\n    var canvasPic = document.getElementById(\"canvasPic\");\n    var ctx = canvasPic.getContext(\"2d\");\n\n    ctx.clearRect(0, 0, 12, 40);\n    ctx.fillStyle = \"#00FFF2\";         // make background fill (is this necessary?)\n    ctx.fillRect(0, 0, 112, 36);\n\n    var imageObj = new Image();\n    imageObj.src = image;\n    imageObj.onload = function() {\n      //void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n\n      ctx.drawImage(imageObj, 0, 0, frameWidth, 100);\n    };\n    */\n\n    console.log('redraw ');\n  }\n\n  function startTransition () {\n\n    var myVar = setInterval(myTimer, 15);\n\n    var direction = 1;\n    var i = 0;\n\n    function myTimer() {\n\n      //document.getElementById('playTriangle').style.top = (480 - (points[i] + calibratePoint));\n      //document.getElementById('playTriangle').style.marginLeft = (480 - (points[i] + calibratePoint));\n      //document.getElementById('playTriangle').style.opacity = (1 - (0 - ((points[i] - calibratePoint) / calibratePoint)));\n      //document.getElementById('playTriangle').style.transform = \"translate \" + (480 - (points[i] + calibratePoint)) + \"px\";\n      //document.getElementById('playTriangle').style.transform = {translate,};\n      //document.getElementById(\"playTriangle\").style.transform = \"translate(200px)\";\n      //document.getElementById(\"myDIV\").style.transform = \"translate(20%,100%)\";\n      document.getElementById(\"playTriangle\").style.transform = \"translate(\" + (480 - (points[i] + calibratePoint)) + \"px)\";\n\n      if(direction === 1){\n        i++;\n      }\n\n      if(direction === 0){\n        i--;\n      }\n\n      if(i === numberOfPoints){\n        direction = 0;\n      }\n\n      // draw index line\n      document.getElementById(\"playIndexLine\").style.transform = \"translate(\" + (((drawingCanvasWidth - 25)/numberOfPoints) * i) + \"px)\";\n\n\n      if(i === -1){\n        direction = 1;\n        clearInterval(myVar);\n      }\n    }\n  }\n\n  return (\n    <div id=\"frame\">\n\n      <p onClick={redraw} id='titlen'>CSS transition from image</p>\n\n      <Bildet\n        plotLine={plotLine}\n        passRef={imageCanvasRef}\n        x1={x1} y1={y1} x2={x2} y2={y2}\n        xyChange={setXY}\n        frameWidth={frameWidth}\n        bildetHeight={bildetHeight}/>    \n      <Graph\n        passRef={drawingCanvasRef}\n        drawingCanvasWidth={drawingCanvasWidth}\n        drawingCanvasHeight={drawingCanvasHeight} />\n      <Animator \n        startTransition={startTransition}/>\n    </div>\n  );\n}\n\nexport default Frame;\n\n\n\n\n\n\n/* \n    cutouts:\n\n    // set low pass factor\n    LPF.smoothing = 0.5;\n\n    // do the filtering\n    LPF.smoothArray(points)\n\n    // for fill\n    drawCtx.lineTo(drawingCanvasWidth, drawingCanvasHeight/2);      \n    drawCtx.lineTo(drawingCanvasWidth, drawingCanvasHeight);      \n    drawCtx.fillStyle = \"#EEDDDD\";\n    drawCtx.fill();\n    \n    // for smooting (but do i need smooting when i have low pass?\n    drawCtx.curve(points2, 0.2);\n\n\n\n\n * Gets computed translate values\n * @param {HTMLElement} element\n * @returns {Object}\n \n\nfunction getTranslateValues (element) {\n  const style = window.getComputedStyle(element)\n  const matrix = style.transform || style.webkitTransform || style.mozTransform\n\n  // No transform property. Simply return 0 values.\n  if (matrix === 'none') {\n    return {\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  }\n\n  // Can either be 2d or 3d transform\n  const matrixType = matrix.includes('3d') ? '3d' : '2d'\n  const matrixValues = matrix.match(/matrix.*\\((.+)\\)/)[1].split(', ')\n\n  // 2d matrices have 6 values\n  // Last 2 values are X and Y.\n  // 2d matrices does not have Z value.\n  if (matrixType === '2d') {\n    return {\n      x: matrixValues[4],\n      y: matrixValues[5],\n      z: 0\n    }\n  }\n\n  // 3d matrices have 16 values\n  // The 13th, 14th, and 15th values are X, Y, and Z\n  if (matrixType === '3d') {\n    return {\n      x: matrixValues[12],\n      y: matrixValues[13],\n      z: matrixValues[14]\n    }\n  }\n}\n\n\n    // console.log('x === ' + e.screenX);\n    setSmooth(((e.screenX) / 50) - 7.3 );\n    console.log('smooth ' + smooth);\n    if (smooth <= 1.1) {\n      setSmooth(1.11);\n    }\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/*\n\nthis, App.js, is the container for the frame object.\nits purpose is\n  to be a full screen colored background on which to center the frame\n  \n*/\n\n\nimport './App.css';          // import style sheet for this js file\nimport Frame from './Frame'; // import frame object to display\n\nfunction App() {\n  return (\n    \n    <div id='wrapperDiv'>\n      <Frame />\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}